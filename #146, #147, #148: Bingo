#Exercise 146: Create a Bingo Card

def generate_card():
    card = {"B":random.sample(range(1,16),5),"I": random.sample(range(16,31),5),
        "N": random.sample(range(31,46),5), "G": random.sample(range(46,61),5) ,"O": random.sample(range(61,76),5)}
    return card

card = pd.DataFrame.from_dict(generate_card())
print(card)

#Exercise 147: Checking for a Winning Card

def win_check(card):
    #Horizontal condition:
    for row in card.values():
        if all(square == "x" for square in row):
            return True
    
    #Vertical condition:
    for column in zip(*card.values()):
        if all (square == "x" for square in column):
            return True
    
    #Diagonal condition:
      #from left to right
    if all(card[key][index] =="x" for index, key in enumerate(card)):
        return True

      #from right to left:
    elif all(card[key][index] =="x" for index, key in zip(reversed(range(5)),card)):
        return True
    return False
    
 #Exercise 148: Play Bingo
 
 def play_bingo():
    draw_list = random.sample(range(1,76),75)
    card = generate_card()
    call = 0
    while draw_list != []:
        number_drawn = draw_list.pop()
        call += 1
        for key, value in card.items():
            for index, i in enumerate(value):
                    if i == number_drawn:
                         value[index] = "x"
        if win_check(card):
            break
    card = pd.DataFrame.from_dict(card)
    return call

game = 0
num_calls = []
while game < 1000:
    game +=1
    call = play_bingo()
    num_calls.append(call)

print(f"Minimum number of calls made: {min(num_calls)}" )
print(f"Maximum number of calls made: {max(num_calls)}" )
print(f"Average number of calls made: {round(sum(num_calls)/len(num_calls))}" )
    
